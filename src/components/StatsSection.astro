---
// Component logic here
---

<div class="stats-section">
  <div class="container">
    <div class="stats-grid">
      <!-- Fila 1 -->
      <div class="stat-item">
        <div class="stat-content content-1">
          <!-- Contenido del primer cuadrante -->
           <div class="dots">
            <span class="dot pink-dot-1"></span>
            <span class="dot pink-dot-2"></span>
            <span class="dot pink-dot-3"></span>
            <span class="dot pink-dot-4"></span>
            <span class="dot white-dot">+</span>
           </div>
           <div class="text"><h2>+10 Compañias nos prefieren</h2></div>
        </div>
      </div>
      <div class="stat-item">
        <div class="stat-content img-content-1">
          <!-- Contenido del segundo cuadrante -->
        </div>
      </div>
      <!-- Fila 2 -->
      <div class="stat-item">
        <div class="stat-content img-content-2">
          <!-- Contenido del tercer cuadrante -->
        </div>
      </div>
      <div class="stat-item stat-item-special-layout">
        <div class="stat-item-special-wrapper">
          <div class="stat-content content-2 stat-item-special-top">
            <div class="content-2-item">
              <span>0+</span>
              <h2>AÑOS DE EXPERIENCIA</h2>
            </div>
            <div class="content-2-item">
              <span>0+</span>
              <h2>CATERING REALIZADOS</h2>
            </div>
          </div>
          <div class="stat-item-special-bottom">
            <p>Estes planeando un evento a gran escala o un coffee break tras una capacitación, revisa nuestros servicios y contactanos!</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .stats-section {
    padding: 60px 20px; /* Adjusted padding */
    background-color: #f0f0f0; /* Slightly different background from image */
  }

  .container {
    max-width: 1100px; /* Adjusted max-width */
    margin: 0 auto;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(10, 1fr); /* Base for 30/70 and 60/40 splits */
    grid-template-rows: auto auto; 
    gap: 25px; /* Adjusted gap */
    margin: 0 auto;
  }

  .stat-item {
    background: white; 
    border-radius: 20px; /* More rounded corners */
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    /* transition: transform 0.3s ease, box-shadow 0.3s ease; -- Removed for GSAP animations */
    min-height: 280px; /* Ensure items have consistent height */
  }

  /* 
  .stat-item:hover { // Hover effect removed as per request
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12);
  } 
  */

  /* Grid item spans for specific row distributions */
  .stats-grid .stat-item:nth-child(1) { /* Top-left, Row 1, Col 1 */
    grid-column: 1 / span 3; /* 30% of 10 columns */
  }
  .stats-grid .stat-item:nth-child(2) { /* Top-right, Row 1, Col 2 */
    grid-column: 4 / span 7; /* 70% of 10 columns */
  }
  .stats-grid .stat-item:nth-child(3) { /* Bottom-left, Row 2, Col 1 */
    grid-column: 1 / span 6; /* 60% of 10 columns */
  }
  .stats-grid .stat-item:nth-child(4) { /* Bottom-right, Row 2, Col 2 */
    grid-column: 7 / span 4; /* 40% of 10 columns */
  }

  .stat-content {
    padding: 25px;
    height: 100%;
    box-sizing: border-box;
    display: flex; 
    flex-direction: column; 
    justify-content: center; 
    align-items: center; 
    text-align: center;
  }

  /* --- Quadrant 1: Top-Left (Companies) --- */
  .content-1 {
    background-color: #2D2D2D; 
    display: flex;
    padding: 25px;
    flex-direction: column;
    justify-content: space-evenly;
    align-items: center;
    color: white; 
  }

  .content-1 > div:first-child { /* Dot container */
    display: flex;
    align-items: center;
    margin-bottom: 10px; /* Space between dots and text */
  }

  .content-1 .dot {
    width: 50px; 
    height: 50px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    margin-left: -12px; 
    box-shadow: 0 0 0 1px var(--color-white); /* Creates a border effect using card background */
  }

  .content-1 .dot:first-child {
    margin-left: 0;
  }

  .content-1 .text {
    height: 50%;
    display: flex;
    align-items: flex-end;
    margin-bottom: 0px; /* Space between dots and text */
  }

  .content-1 .pink-dot-1 { background-color: var(--color-primary); } /* Rosa fuerte */
  .content-1 .pink-dot-2 { background-color: var(--color-primary);  filter: brightness(1.1); } /* Rosa medio */
  .content-1 .pink-dot-3 { background-color: var(--color-primary);  filter: brightness(1.2); } /* Rosa claro */
  .content-1 .pink-dot-4 { background-color: var(--color-primary);  filter: brightness(1.3); } /* Rosa más claro */
  .content-1 .white-dot {
    background-color: var(--color-white);
    color: var(--color-dark); 
    font-size: 2rem;
    font-weight: 400; 
    z-index: 2;
  }

  .content-1 h2 {
    font-size: 1.7rem; 
    font-weight: 500;
    margin-bottom: 0;
    font-family: var(--font-primary);
    color: var(--color-white);
    text-align: left;
  }

  /* --- Quadrant 2 & 3: Image Backgrounds --- */
  .img-content-1 {
    background-image: url('/images/Image And Badge.jpg'); 
    background-size: cover;
    background-position: center;
    padding: 0; 
  }

  .img-content-2 {
    background-image: url('/images/Image And Badge 2.jpg'); 
    background-size: cover;
    background-position: center;
    padding: 0; 
  }
  
  /* --- Quadrant 4: Bottom-Right (Stats) --- */
  .content-2 {
    background-color: #2D2D2D; 
    color: white;
    flex-direction: row; 
    justify-content: space-evenly; /* Evenly space items */
    align-items: center;
    gap: 15px; 
  }

  .content-2-item {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    gap: 5px; 
  }

  .content-2-item span { 
    font-size: 3rem; 
    font-weight: 600; 
    font-family: var(--font-secondary);
    color: white;
    line-height: 1.1;
  }

  .content-2-item h2 { 
    font-size: 1rem; /* Smaller for sub-text */
    font-weight: 700;
    color: #B0B0B0; 
    text-transform: uppercase;
    letter-spacing: 0.5px;
    line-height: 1.3;
  }

  /* --- Styles for the fourth stat item special layout --- */
  .stat-item-special-layout {
    padding: 0; /* Remove padding as children will handle it */
    display: flex; /* Ensure it works well with the inner flex wrapper */
  }

  .stat-item-special-wrapper {
    display: flex;
    flex-direction: column;
    height: 100%;
    width: 100%;
    /* Parent .stat-item already has border-radius and overflow:hidden */
  }

  .stat-item-special-top {
    /* This element also has .stat-content and .content-2 classes */
    height: auto !important; /* Override .stat-content's height: 100% to allow space for bottom row. !important might be needed for specificity. */
    flex-shrink: 0; /* Prevent this part from shrinking */
    /* Other styles like background, text color, padding (from .stat-content), and internal flex layout (from .content-2) are inherited */
  }

  .stat-item-special-bottom {
    padding: 25px;
    text-align: left;
    background-color: #FFFFFF; /* White background for the text area */
    color: #3a3a3a;
    font-size: 0.9rem;
    line-height: 1.5;
    display: flex; /* To control alignment of <p> if needed */
    /* align-items: center; */ /* Text appears top-aligned in the reference image */
    flex-grow: 1; /* Allow this part to take remaining vertical space */
    font-family: var(--font-primary); /* Use secondary font or fallback */
  }

  .stat-item-special-bottom p {
    margin: 0;
  }

  /* Responsive adjustments */
  @media (max-width: 992px) { /* Tablet */
    .stat-item {
        min-height: 250px;
    }
    .content-2-item span {
        font-size: 2.2rem;
    }
  }

  @media (max-width: 768px) { /* Mobile */
    .stats-grid {
      grid-template-columns: 1fr; 
      gap: 20px;
    }
    .stat-item {
        min-height: 220px; 
    }
    .content-1 .dot {
        width: 28px;
        height: 28px;
        margin-left: -10px;
    }
    .content-1 h2 {
        font-size: 1.1rem;
    }
    .content-2-item span {
        font-size: 2rem;
    }
    .content-2-item h2 {
        font-size: 0.7rem;
    }
  }

  @media (max-width: 480px) { /* Small Mobile */
    .stats-section {
        padding: 40px 15px;
    }
    .stats-grid {
        gap: 15px;
    }
    .stat-item {
        min-height: auto; /* Allow content to define height */
        border-radius: 15px;
    }
    .stat-content {
        padding: 20px;
    }
    .content-1 .dot {
        width: 26px;
        height: 26px;
    }
    .content-1 h2 {
        font-size: 1rem;
    }
    .content-2 {
        flex-direction: column; 
        gap: 20px;
    }
    .content-2-item span {
        font-size: 1.8rem;
    }
  }
</style>

<script>
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

document.addEventListener('DOMContentLoaded', () => {
  try {
    gsap.registerPlugin(ScrollTrigger);
  } catch (e) {
    console.error('StatsSection: Error registering GSAP ScrollTrigger plugin:', e);
    return; // Stop if plugin registration fails
  }

  function gsapAnimateValue(
    element: Element | null,
    endValue: number,
    durationSeconds: number,
    prefix: string = "",
    suffix: string = "",
    useLocaleString: boolean = false
  ) {
    if (!element) return;

    let counter = { value: 0 }; // Start counting from 0

    gsap.to(counter, {
      value: endValue,
      duration: durationSeconds,
      ease: "power1.inOut",
      onUpdate: () => {
        let currentValue = Math.floor(counter.value);
        let displayText = prefix;
        if (useLocaleString) {
          displayText += currentValue.toLocaleString('es-CL');
        } else {
          displayText += currentValue;
        }
        displayText += suffix;
        element.textContent = displayText;
      }
    });
  }

  function runNumberAnimations() {
    const experienceElement = document.querySelector('.stat-item-special-layout .content-2-item:nth-child(1) span');
    const cateringElement = document.querySelector('.stat-item-special-layout .content-2-item:nth-child(2) span');

    if (experienceElement) {
      gsapAnimateValue(experienceElement, 10, 1.2, "", "+");
    }
    if (cateringElement) {
      gsapAnimateValue(cateringElement, 1000, 1.7, "", "", true);
    }
  }

  function initializeAnimations() {
    const statItems: Element[] = gsap.utils.toArray<Element>('.stats-grid > .stat-item');
    const triggerElement = document.querySelector('.stats-grid');

    // --- Cleanup previous GSAP instances for this component ---
    ScrollTrigger.getAll().forEach(st => {
      if (st.trigger === triggerElement || (statItems.length > 0 && statItems.some(item => item === st.trigger))) {
        st.kill();
      }
    });
    if (statItems.length > 0) {
      gsap.killTweensOf(statItems);
    }
    const experienceElement = document.querySelector('.stat-item-special-layout .content-2-item:nth-child(1) span');
    const cateringElement = document.querySelector('.stat-item-special-layout .content-2-item:nth-child(2) span');
    if (experienceElement) gsap.killTweensOf(experienceElement);
    if (cateringElement) gsap.killTweensOf(cateringElement);
    // --- End Cleanup ---

    if (!triggerElement) {
      runNumberAnimations(); // Fallback if grid not found
      return;
    }

    const mainTimeline = gsap.timeline({
      scrollTrigger: {
        trigger: triggerElement,
        // markers: true, // DEBUGGING - Removed for production
        start: 'top 85%',
        end: 'bottom top', // Primarily for marker visualization with once: true
        once: true,
        invalidateOnRefresh: true, // Good for responsive designs
      },
      onComplete: () => {
        runNumberAnimations();
      }
    });

    if (statItems.length === 0) {
      // No items to animate, onComplete will run number animations.
    } else if (statItems.length >= 4) {
      gsap.set(statItems[0], { opacity: 0, x: -50, y: 0 });
      gsap.set(statItems[1], { opacity: 0, x: 0, y: -50 });
      gsap.set(statItems[2], { opacity: 0, x: 0, y: 50 });
      gsap.set(statItems[3], { opacity: 0, x: 50, y: 0 });
      
      mainTimeline.to(statItems.slice(0, 4), {
        opacity: 1, x: 0, y: 0, duration: 0.8, stagger: 0.2, ease: 'power3.out'
      }, 0);

      if (statItems.length > 4) {
        gsap.set(statItems.slice(4), { opacity: 0, y: 50 }); // Default appear from bottom for additional items
        mainTimeline.to(statItems.slice(4), {
          opacity: 1, y: 0, duration: 0.8, stagger: 0.2, ease: 'power3.out'
        }, ">-0.4"); // Start slightly before the previous stagger sequence finishes
      }
    } else { // Fallback for 1 to 3 items
      gsap.set(statItems, { opacity: 0, y: 50 }); // All from bottom
      mainTimeline.to(statItems, {
        opacity: 1, y: 0, duration: 0.6, stagger: 0.2, ease: 'power3.out'
      }, 0);
    }
  }

  initializeAnimations();

  // Optional: Astro-specific lifecycle hooks for more complex scenarios
  // document.addEventListener('astro:page-load', initializeAnimations);
  // document.addEventListener('astro:before-swap', () => {
  //   ScrollTrigger.getAll().forEach(trigger => trigger.kill());
  //   gsap.killTweensOf(".stats-grid > .stat-item, .stat-item-special-layout span");
  // });
});
</script>
